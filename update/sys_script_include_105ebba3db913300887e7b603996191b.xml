<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_341272_nexmo_dir.NexmoCallbackApi</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>NexmoCallbackApi</name>
        <script><![CDATA[var NexmoCallbackApi = Class.create();
NexmoCallbackApi.prototype = {
	Control: function () {
		this._skipRest = false;
		this.setSkipRest = function (flag) {
			this._skipRest = flag;
		};
	},

    initialize: function() {
    },
	
	_invokeCallbacks: function (callbackFor, payload, type) {
		var gr = new GlideRecord('sn_twilio_direct_callback_processor');
		gr.addQuery('callback_name', callbackFor);
		gr.addQuery('response_type', type);
		gr.orderBy('order');
		gr.query();
		var lastResponse;
		while (gr.next()) {
			var ctrl = new this.Control();
			var ev = new GlideScopedEvaluator();
			ev.putVariable('callbackFor', callbackFor);
			ev.putVariable('payload', payload);
			ev.putVariable('lastResponse', lastResponse);
			ev.putVariable('control', ctrl);
			ev.withReturnError(true);
			lastResponse = ev.evaluateScript(gr, 'processor');
			if (ctrl._skipRest)
				break;
		}
		if (payload.ctx && payload.ctx.length > 0) {
			var ctxId = payload.ctx[0];
			var resp = ApiContext.runCallbackListener(ctxId, callbackFor, payload, lastResponse);
			if (resp)
				lastResponse = resp;
		}
		return lastResponse;
	},
	
	getDefaultNexmlResponse: function () {
		var a = new x_341272_nexmo_dir.NexmlHelper().api();
		a.say('This is a message from Service Now, Twilio Direct runtime. We could not successfully process the callback. Disconnecting now.');
		a.hangup();
		return a;
	},

	getNexmlResponse: function (callbackFor, payload) {
		return this._invokeCallbacks(callbackFor, payload, 'nexml');
	},
	
	getDefaultXmlResponse: function () {
		return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Response></Response>";
	},
	
	getXmlResponse: function (callbackFor, payload) {
		return this._invokeCallbacks(callbackFor, payload, 'xml');
	},

    type: 'NexmoCallbackApi'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-05-15 09:35:47</sys_created_on>
        <sys_id>105ebba3db913300887e7b603996191b</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>NexmoCallbackApi</sys_name>
        <sys_package display_value="Nexmo Direct Driver" source="x_341272_nexmo_dir">e0ab53a7db113300887e7b60399619fa</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Nexmo Direct Driver">e0ab53a7db113300887e7b60399619fa</sys_scope>
        <sys_update_name>sys_script_include_105ebba3db913300887e7b603996191b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-07-17 12:11:25</sys_updated_on>
    </sys_script_include>
</record_update>
