<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_341272_nexmo_dir.NotifyNexmoOutboundCallRecipe</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>NotifyNexmoOutboundCallRecipe</name>
        <script><![CDATA[var NotifyNexmoOutboundCallRecipe = Class.create();
NotifyNexmoOutboundCallRecipe.prototype = Object.extendsObject(BaseNotifyNexmoCallRecipe, {
  initialize: function () {
    BaseNotifyNexmoCallRecipe.prototype.initialize.apply(this, arguments);
  },

  onStart: function (notifyPhoneNumber, toPhoneNumber) {

    this.data.notifyPhoneNumber = notifyPhoneNumber;
    var notifyGr = this.db.getNotifyNumberByNumber(notifyPhoneNumber);
    if (notifyGr)
      this.data.notifyNumberGrId = notifyGr.getUniqueValue();
    else {
      gs.error("Could not make call to {0} using Twilio number {1} as it is not registered in notify_number", [toPhoneNumber, notifyPhoneNumber]);
      this.end();
      return;
    }
    this.data.toPhoneNumber = toPhoneNumber;
    this.saveData();


    var answerUrl = this.ctx.getNexmlUrl("callAnswered", this.getCallback('onCallAnswered'));
    var eventUrl = this.ctx.getNexmlUrl("primaryCallStatus", this.getCallback('onPrimaryCallStatus'));

	gs.info(JSON.stringify(answerUrl) + 'answer');
gs.info(JSON.stringify(eventUrl) + 'eventUrl');

    var JWToken = '';
    var target = new GlideRecord('x_341272_nexmo_dir_nexmo_config');
    target.query();
    target.next();
    var today = new GlideDateTime();

    var gdt = new GlideDateTime();
    gdt.addDaysUTC(1);
    if (target.expire > today) {
      JWToken = target.jwt_token;
    } else {
	  var obj = new JsrsasignMain();
      var key = target.private_key;
      var sign = obj.assignTokenparams(key, target.application_id);
      JWToken = sign;
      var rec = new GlideRecord('x_341272_nexmo_dir_nexmo_config');
      rec.addQuery('application_id', target.application_id);
      rec.query();
      while (rec.next()) {
        rec.jwt_token = JWToken;
        rec.expire = gdt;
        rec.update();

      }
    }


    gs.info(JWToken + 'JWToken');
	var sm = new sn_ws.RESTMessageV2('x_341272_nexmo_dir.nexmocall', 'Default POST');
	var endpoint = sm.getEndpoint();
    var request = new sn_ws.RESTMessageV2();
    request.setEndpoint(endpoint);
    request.setHttpMethod('POST');
    request.setRequestHeader("Content-type", "application/json");
    request.setRequestHeader("Authorization", "Bearer " + JWToken);
	  
	  request.setRequestBody('{"to": [{"number": "' + toPhoneNumber + '","type":"phone"}],"from":{"number":"' + notifyPhoneNumber + '","type": "phone"}, "ncco":[ {  "action": "talk",  "text": "Welcome to a Voice API I V R.",  "voiceName": "Amy", "bargeIn": false  }], "answer_url": ["' + answerUrl.url + '"], "event_url": ["' + eventUrl.url + '"] , "event_method":"GET"};');
   
//     request.setRequestBody('{"to": [{"number": "' + toPhoneNumber + '","type":"phone"}],"from":{"number":"' + notifyPhoneNumber + '","type": "phone"}, "ncco":[ {  "action": "talk",  "text": "Welcome to a Voice API I V R.",  "voiceName": "Amy", "bargeIn": false  },  { "action": "talk", "text": "Press 1, for maybe, and 2, for not sure, followed by the hash key.",  "voiceName": "Amy",  "bargeIn": true  },  {  "action": "input",   "submitOnHash": true,  "timeOut": 10 }, { "action": "talk",   "text": "Thanks for your input, goodbye.", "voiceName": "Amy"  } ], "answer_url": ["' + answerUrl.url + '"], "event_url": ["' + eventUrl.url + '"] , "event_method":"GET"};');

    var resp = request.execute();


    var nexmoreqbody = resp.getBody();
    var requestString = nexmoreqbody.dataString;


    if (nexmoreqbody) {

      var nexmores = JSON.parse(nexmoreqbody);
      gs.info(JSON.stringify(nexmores) + ' respnso');
      this.data.callId = nexmores.uuid;
      this.saveData();
      return this.data.callId;
    }
  },

  onCallAnswered: function (p) {
    var payload = p.payload;
    var callId = payload.uuid[0];
    var answeredBy = "human";
    var isMachine = answeredBy !== "human";
    if (callId !== this.data.callId) {
      gs.error("Error! Received callback for unexpected call sid " + callId + " while expecting for call sid " + this.data.callId);
    }
    // get the call record for this call
    var callRecord = this.getCallGr(callId);

    // set who answered the call (machine vs human)
    callRecord = this.db.setIsHuman(callRecord, !isMachine);

    var notifyAction = this.workflow.processAndWaitActivityJ(callRecord);
    gs.info(JSON.stringify(notifyAction) + ' notifyAction');
    return this.getNexmlFromAction(notifyAction);

  },
  addInputCallStatus: function (p) {
    this.nutil.addInputCallStatus(p.uuid[0], p.dtmf[0]);
  },

  onPrimaryCallStatus: function (p) {

    var payload = p.payload;
    var status = payload.status[0];
    var callId = payload.uuid[0];

gs.info(status + ' status');


    if (callId !== this.data.callId) {
      gs.error("Error! Received status update for unexpected call sid " + callId + " while expecting update for call sid " + this.data.callId);
      return;
    }


    this.nutil.addCallStatusFromPayload(payload);
	 
    if (status == 'answered') {
      var isMachine = "human";
      var callRecord = this.getCallGr(callId);
      // set who answered the call (machine vs human)
      callRecord = this.db.setIsHuman(callRecord, !isMachine);

      var notifyAction = this.workflow.processAndWaitActivityJ(callRecord);
		
		var rec = this.getNexmlFromAction(notifyAction);
		
		var callSysID = callRecord.getUniqueValue();
		var gr = new GlideRecord("notify_wf_activity");
		gr.addQuery("notify_call", callSysID);
		gr.orderByDesc("sys_created_on");
		gr.query();
		gr.next();
		gs.info(gr.getUniqueValue() + ' gr get unidqu    '  + callSysID);
// 		var frec = this.finishWaitingActivities(null, true, gr.getUniqueValue());
// 		gs.info(JSON.stringify(frec) + ' frec notify');
		var notify = new sn_notify.NotifyScoped();
		var phoneNumbers = notify.modifyCall(callRecord, gr.notify_action, gr);

		
    }

    if (this.nutil.isCallOver(status))
      this.end(); // This is the end of journey for this call and its children calls
  },

  type: 'NotifyNexmoOutboundCallRecipe'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-05-15 09:39:21</sys_created_on>
        <sys_id>3f1f73a3db913300887e7b6039961934</sys_id>
        <sys_mod_count>37</sys_mod_count>
        <sys_name>NotifyNexmoOutboundCallRecipe</sys_name>
        <sys_package display_value="Nexmo Direct Driver" source="x_341272_nexmo_dir">e0ab53a7db113300887e7b60399619fa</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Nexmo Direct Driver">e0ab53a7db113300887e7b60399619fa</sys_scope>
        <sys_update_name>sys_script_include_3f1f73a3db913300887e7b6039961934</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-05-27 12:35:26</sys_updated_on>
    </sys_script_include>
</record_update>
