<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_341272_nexmo_dir.BaseRecipe</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>BaseRecipe</name>
        <script><![CDATA[var BaseRecipe = Class.create();
BaseRecipe.getRecipeInstance = function (parentApiCtxIdOrGr) {
	var apiCtx;
	if (parentApiCtxIdOrGr instanceof GlideRecord)
		apiCtx = parentApiCtxIdOrGr;
	else
		apiCtx = ApiContext.get(parentApiCtxIdOrGr);
	if (apiCtx && apiCtx.isActive()) {
		var apiCtxData = apiCtx.getExtraData();
		if (apiCtxData && apiCtxData.meta && apiCtxData.meta.scope && apiCtxData.meta.type) {
			var recipe = new this[apiCtxData.meta.scope][apiCtxData.meta.type]();
			recipe._restore(apiCtx);
			return recipe;
		}
	}
};
BaseRecipe.prototype = {
	NEW_CALL_URL: '/newCall/',
	NEW_SMS_URL: '/newSMS/',

    initialize: function() {
    },

	start: function () {
		this.ctx = ApiContext.newContext();
		this.data = {};
		this.saveData(); // Capture meta info
		return this.onStart.apply(this, arguments);
	},

	resume: function (ctx, methodName, args) {
		this._restore(ctx);
		var m = this[methodName];
		if (!m)
			throw 'Given method ' + m + ' cannot be found  in ' + this.type;
		return m.call(this, args);
	},

	signal: function (signalName) {
		this.onSignal(signalName);
	},

	onSignal: function (signalName) {},
	
	_restore: function (ctx) {
		this.ctx = ctx;
		this.data = this.getContextDataFromContext(ctx);
	},

	getCallback: function (methodName) {
		var args = this.ctx.ARGS;
		var o = "";
		args.forEach(function (a) {
			if (o)
				o += ",";
			o += a + ":" + a;
		});
		var script = "function (" +
			args.join(',') + ") { var _ctx = x_341272_nexmo_dir.ApiContext.get('" + this.ctx.getCtxId() + "'); return new " + gs.getCurrentScopeName() + "." + this.type + "().resume(_ctx,'" + methodName + "',{"+ o + "}); }";
		return script;
	},

	saveData:  function() {
		this.ctx.saveExtraData({
			data: this.data,
			meta: {
				scope: gs.getCurrentScopeName(),
				type: this.type
			}
		});
	},

	onStart: function () {
		throw 'Not Implemented';
	},

	end: function () {
		this.onEnd();
		this.ctx.release();
	},

	onEnd: function () {
	},

	registerForNewCall: function (methodName) {
		this.ctx.getNexmlUrl(this.NEW_CALL_URL, this.getCallback(methodName));
	},

	registerForNewSMS: function(methodName) {
		this.ctx.getNexmlUrl(this.NEW_SMS_URL, this.getCallback(methodName));
	},

	getAllActiveCallbackContextsForNewCall: function(apiCtxId) {
		var cbCtxGr = new GlideRecord(sn_context.BaseApiContext.TABLE_CALLBACK_CTX);
		cbCtxGr.addActiveQuery();
		cbCtxGr.addQuery('callback_name', this.NEW_CALL_URL);
		cbCtxGr.query();

		return cbCtxGr;
	},

	getContextFromCallbackContext: function(cbCtxGr) {
		var apiCtxId, apiCtx;
		if (cbCtxGr)
			apiCtxId = cbCtxGr.getValue('parent');
		if (apiCtxId) {
			apiCtx = ApiContext.get(apiCtxId);
		}
		return apiCtx;
	},

	getContextDataFromContext : function(apiCtx) {
		if (apiCtx) {
			var apiCtxData = apiCtx.getExtraData();
			if (apiCtxData && apiCtxData.data)
				return apiCtxData.data;
		}
		return {};
	},

    type: 'BaseRecipe'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-05-15 09:34:19</sys_created_on>
        <sys_id>cafd3363db913300887e7b6039961950</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>BaseRecipe</sys_name>
        <sys_package display_value="Nexmo Direct Driver" source="x_341272_nexmo_dir">e0ab53a7db113300887e7b60399619fa</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Nexmo Direct Driver">e0ab53a7db113300887e7b60399619fa</sys_scope>
        <sys_update_name>sys_script_include_cafd3363db913300887e7b6039961950</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-05-21 09:26:13</sys_updated_on>
    </sys_script_include>
</record_update>
