<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/x-www-form-urlencoded,application/json</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>Nexmo Event Post</name>
        <operation_script><![CDATA[(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

  var requestBody = request.body;
  var requestString = JSON.parse(requestBody.dataString);
  gs.info(JSON.stringify(requestString) + ' post respnso');

  // 			response.setStatus(200);

  var payload;
  var callback_method;
  if (requestString.payload['callback_method'] == 'onInputReceived') {
    payload = {
		  "Digits": [1],
		  "ctx": [requestString.payload['ctx']]
    };
    callback_method = requestString.payload['callback_method'];
  } else {
    payload = {
      "ctx": [requestString.payload['ctx']]
    };
    callback_method = requestString.payload['callback_method'];
  }


  var helper = new NexmoHelper();
  var resp;

  var cApi = new NexmoCallbackApi();
  if (request.pathParams.type == 'nexml') {
    resp = cApi.getNexmlResponse(callback_method, payload);

    if (resp != undefined) {
      gs.info(JSON.stringify(resp) + " munish");
      var text;
      var nccotext;
		var eventUrl;
		var str1;
		var str2;
		var str3;
		var str4;
		if(resp._children[1]._text){
			   eventUrl = resp._children[1]._text;
			   str1 = eventUrl.split("?");
			   str2 = str1[1].split("&amp;");
			   str3 = str2[0].split("=");
			   str4 = str2[1].split("=");
		}
      if (resp._children[0]._tagName == 'Gather') {
        text = resp._children[0]._children[0]._text + ' ' + resp._children[0]._children[1]._text;
        nccotext = '[{"action": "talk", "text":"' + text + '"},{"action": "input"}, {"action": "notify", "payload": { "ctx": "' + str3[1] + '", "callback_method": "' + str4[1] + '" }, "event_url": ["' + eventUrl + '"]}]';
      } else if (resp._children[0]._tagName == 'Say') {
        text = resp._children[0]._text;
        nccotext = '[{"action": "talk", "text":"' + text + '"}, {"action": "notify", "payload": { "ctx": "' + str3[1] + '", "callback_method": "' + str4[1] + '" }, "event_url": ["' + eventUrl + '"]}]';
      } else if (resp._children[0]._tagName == 'Dial') {
		  nccotext = '[{"action": "talk", "text":"connecting"}, {"action": "conversation", "name":"12345769854"},{"action": "notify", "payload": { "ctx": "' + str3[1] + '", "callback_method": "' + str4[1] + '" }, "event_url": ["' + eventUrl + '"]}]';
	  }
      gs.info(text);

      gs.info(nccotext + " nccotext");
      response.setContentType('application/json');
      response.getStreamWriter().writeString(nccotext);
    } else {
      if (!resp)
        resp = cApi.getDefaultNexmlResponse();
      response.setContentType('application/xml');
      if (resp instanceof NexmlModel)
        response.getStreamWriter().writeString(resp.toXml());
      else
        response.getStreamWriter().writeString(resp.toString());
    }
  } else if (request.pathParams.type == 'xml') {
    resp = cApi.getXmlResponse(callback_method, payload);
    if (!resp)
      resp = cApi.getDefaultXmlResponse();
    response.setContentType('application/xml');
    response.getStreamWriter().writeString(resp.toString());
  } else
    resp = new sn_ws_err.BadRequestError('Unknown type value specified: ' + request.pathParams.type);
  return resp;

})(request, response);]]></operation_script>
        <operation_uri>/api/x_341272_nexmo_dir/nexmo_event_call/process/{type}</operation_uri>
        <produces>application/xml,text/xml,application/json</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/process/{type}</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>false</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-06-07 11:19:13</sys_created_on>
        <sys_id>1172ba0bdbf13300887e7b6039961996</sys_id>
        <sys_mod_count>109</sys_mod_count>
        <sys_name>Nexmo Event Post</sys_name>
        <sys_package display_value="Nexmo Direct Driver" source="x_341272_nexmo_dir">e0ab53a7db113300887e7b60399619fa</sys_package>
        <sys_policy/>
        <sys_scope display_value="Nexmo Direct Driver">e0ab53a7db113300887e7b60399619fa</sys_scope>
        <sys_update_name>sys_ws_operation_1172ba0bdbf13300887e7b6039961996</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-07-18 11:41:20</sys_updated_on>
        <web_service_definition display_value="Nexmo Event Call">92abfbafdb513300887e7b6039961936</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
